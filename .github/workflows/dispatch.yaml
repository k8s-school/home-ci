name: Repository Dispatch Test

on:
  repository_dispatch:
    types: [test-home-ci, test-home-ci-dispatch-all, test-home-ci-with-artifacts]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Echo dispatch event
        run: |
          echo "Repository dispatch received!"
          echo "Event type: ${{ github.event.action }}"
          echo "Dispatch type: ${{ github.event.action }}"
          echo "Client payload: ${{ toJson(github.event.client_payload) }}"

      - name: Display artifacts
        if: github.event.client_payload.artifacts
        run: |
          echo "Artifacts received:"
          echo "${{ toJson(github.event.client_payload.artifacts) }}"

      - name: Extract and upload artifacts
        if: github.event.client_payload.artifacts
        run: |
          mkdir -p artifacts

          # Extract log file if present
          if echo '${{ toJson(github.event.client_payload.artifacts) }}' | jq -e 'to_entries[] | select(.value.type == "log")' > /dev/null; then
            for artifact in $(echo '${{ toJson(github.event.client_payload.artifacts) }}' | jq -r 'to_entries[] | select(.value.type == "log") | "\(.key):\(.value.content)"'); do
              filename=$(echo $artifact | cut -d: -f1)
              content=$(echo $artifact | cut -d: -f2-)
              echo "$content" | base64 -d > "artifacts/$filename"
              echo "Extracted: $filename"
            done
          fi

          # Extract result file if present
          if echo '${{ toJson(github.event.client_payload.artifacts) }}' | jq -e 'to_entries[] | select(.value.type == "result")' > /dev/null; then
            for artifact in $(echo '${{ toJson(github.event.client_payload.artifacts) }}' | jq -r 'to_entries[] | select(.value.type == "result") | "\(.key):\(.value.content)"'); do
              filename=$(echo $artifact | cut -d: -f1)
              content=$(echo $artifact | cut -d: -f2-)
              echo "$content" | base64 -d > "artifacts/$filename"
              echo "Extracted: $filename"
            done
          fi

          # Save metadata
          if echo '${{ toJson(github.event.client_payload.artifacts) }}' | jq -e '.metadata' > /dev/null; then
            echo '${{ toJson(github.event.client_payload.artifacts.metadata) }}' > artifacts/metadata.json
            echo "Extracted: metadata.json"
          fi

          ls -la artifacts/

      - name: Set artifact name
        if: github.event.client_payload.artifacts
        run: |
          # Extract first 8 characters of commit hash
          COMMIT_SHORT=$(echo "${{ github.event.client_payload.commit }}" | cut -c1-8)
          echo "ARTIFACT_NAME=log-${{ github.event.client_payload.branch }}-${COMMIT_SHORT}" >> $GITHUB_ENV
          echo "Artifact name will be: log-${{ github.event.client_payload.branch }}-${COMMIT_SHORT}"

      - name: Upload artifacts to GitHub Actions
        if: github.event.client_payload.artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: artifacts/

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Run home-ci test
        run: |
          echo "Running home-ci dispatch test..."
          # Add your home-ci specific test commands here
          go version